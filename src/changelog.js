#!/usr/bin/env node
const fs = require('fs');
const { logSuccess, execCommand, getVersion, colors } = require('./utils');

function changelogChangeHeader() {
    try {
        const currentVersion = getVersion();
        if (!currentVersion) {
            return false;
        }
        
        const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
        const updatedChangelog = changelog.replace(
            /## \[Unreleased\]/g,
            `## üöÄ [${currentVersion}]`
        );
        
        fs.writeFileSync('CHANGELOG.md', updatedChangelog);
        console.log(` ${colors.yellow} ${colors.reset} Update header ${colors.green}üöÄ [${currentVersion}]${colors.reset}.`);
        return true;
    } catch (error) {
        return false;
    }
}

function changelogRemoveEmptyChapters() {
    try {
        const data = fs.readFileSync('CHANGELOG.md', 'utf8');
        const updatedData = data.replaceAll(/###.*\n\n_.*_\n\n/gm, '');
        fs.writeFileSync('CHANGELOG.md', updatedData);
        
        console.log(` ${colors.yellow} ${colors.reset} Remove empty chapters.`);
        return true;
    } catch (error) {
        return false;
    }
}

function changelogAddUnreleasedBlock() {
    try {
        const currentVersion = getVersion();
        if (!currentVersion) {
            return false;
        }
        
        const unreleased = `## [Unreleased]

### üÜï Added

_–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏._

### üõ† Changed

_–°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–∏–≤—à–µ–π—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏._

### üìú Deprecated

_–°–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏._

### üóë Removed

_–°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏._

### ü™≤ Fixed

_–°–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–∞–≥–æ–≤._

### üîê Security

_–°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–æ–∫ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏._

### üì¶ Support

_–°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–æ–∫ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏._

`;
        
        const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
        const updatedChangelog = changelog.replace(
            new RegExp(`## üöÄ \\[${currentVersion}\\]`),
            `${unreleased}## üöÄ [${currentVersion}]`
        );
        
        fs.writeFileSync('CHANGELOG.md', updatedChangelog);
        console.log(` ${colors.yellow} ${colors.reset} Add unreleased block.`);
        return true;
    } catch (error) {
        return false;
    }
}

function changelogCommit() {
    const addSuccess = execCommand('git add CHANGELOG.md', null, null);
    const commitSuccess = execCommand('git commit --message "üìù Update changelog." --no-verify', null, null);
    
    if (addSuccess && commitSuccess) {
        logSuccess('Û∞úò', 'Commit updated changelog.');
        return true;
    }
    return false;
}


module.exports = {
    changelogChangeHeader,
    changelogRemoveEmptyChapters,
    changelogAddUnreleasedBlock,
    changelogCommit
};
